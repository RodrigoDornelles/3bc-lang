MEMORY {

    ZP: 		start = $0000, size = $0100, type = rw, define = yes;
    HEADER:		start = $0000, size = $0010, file = %O ,fill = yes;
    PRG: 		start = $8000, size = $7fc0, file = %O ,fill = yes, define = yes;
	VECTORS: 	start = $fffa, size = $0006, file = %O, fill = yes;
    CHR: 		start = $0000, size = $2000, file = %O, fill = yes;
    RAM:		start = $0300, size = $0500, define = yes;
	  
}

SEGMENTS {

    HEADER:   load = HEADER,         type = ro;
    STARTUP:  load = PRG,            type = ro,  define = yes;
    LOWCODE:  load = PRG,            type = ro,                optional = yes;
    ONCE:     load = PRG,            type = ro,                optional = yes;
    INIT:     load = PRG,            type = ro,  define = yes, optional = yes;
    CODE:     load = PRG,            type = ro,  define = yes;
    RODATA:   load = PRG,            type = ro,  define = yes;
    DATA:     load = PRG, run = RAM, type = rw,  define = yes;
    VECTORS:  load = VECTORS,        type = ro;
	CHARS:    load = CHR,            type = ro;
    BSS:      load = RAM,            type = bss, define = yes;
    HEAP:     load = RAM,            type = bss, optional = yes;
    ZEROPAGE: load = ZP,             type = zp;

}

FEATURES {

    CONDES: segment = INIT,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
	    segment = RODATA,
	    label = __INTERRUPTOR_TABLE__,
	    count = __INTERRUPTOR_COUNT__;
		
}

SYMBOLS {
    __STACKSIZE__ : type = weak, value = $0500; # 5 pages stack
	
	NES_MAPPER	  : type = weak, value = 0; # mapper number
	NES_PRG_BANKS : type = weak, value = 2; # number of 16K PRG banks, change to 2 for NROM256
	NES_CHR_BANKS : type = weak, value = 1; # number of 8K CHR banks
	NES_MIRRORING : type = weak, value = 0; # 0 horizontal, 1 vertical, 8 four screen

}